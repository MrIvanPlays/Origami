From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <ivan@mrivanplays.com>
Date: Thu, 16 Jul 2020 14:17:01 +0300
Subject: [PATCH] Build in a packet limiter

The main reasoning behind is that most of the servers suffer due to packet spam which drops the TPS.

diff --git a/src/main/java/com/mrivanplays/origami/OrigamiConfig.java b/src/main/java/com/mrivanplays/origami/OrigamiConfig.java
index 111fa3cd586c31eb0ab9fd425179d1f54a40a0f4..306584afb5a8bf1fa53d15f5697d6511a7f3912a 100644
--- a/src/main/java/com/mrivanplays/origami/OrigamiConfig.java
+++ b/src/main/java/com/mrivanplays/origami/OrigamiConfig.java
@@ -107,4 +107,19 @@ public final class OrigamiConfig {
             log("Using vanilla redstone algorithm");
         }
     }
+
+    public static int packetIntervalSeconds = 7;
+    private static void packetIntervalSeconds() {
+        packetIntervalSeconds = getInt("packet-limiter-interval-seconds", packetIntervalSeconds);
+    }
+
+    public static int maxPacketRate = 500;
+    private static void maxPacketRate() {
+        maxPacketRate = getInt("packet-limiter-max-packet-rate", maxPacketRate);
+    }
+
+    public static String packetLimiterDisconnectMessage = "You have been disconnected for sending too many packets.";
+    private static void packetLimiterDisconnectMessage() {
+        packetLimiterDisconnectMessage = getString("packet-limiter-disconnect-message", packetLimiterDisconnectMessage);
+    }
 }
diff --git a/src/main/java/com/mrivanplays/origami/util/OrigamiPacketLimiter.java b/src/main/java/com/mrivanplays/origami/util/OrigamiPacketLimiter.java
new file mode 100644
index 0000000000000000000000000000000000000000..715421fd858e82ca129fc50813b4adbc1097b929
--- /dev/null
+++ b/src/main/java/com/mrivanplays/origami/util/OrigamiPacketLimiter.java
@@ -0,0 +1,36 @@
+package com.mrivanplays.origami.util;
+
+import com.mrivanplays.origami.OrigamiConfig;
+
+import net.minecraft.server.PlayerConnection;
+
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+import io.netty.channel.ChannelDuplexHandler;
+import io.netty.channel.ChannelHandlerContext;
+
+public class OrigamiPacketLimiter extends ChannelDuplexHandler {
+
+    private static final Logger LOGGER = LogManager.getLogger();
+
+    private final PlayerConnection connection;
+    private final PacketBucket bucket;
+
+    public OrigamiPacketLimiter(PlayerConnection connection) {
+        this.connection = connection;
+        this.bucket = new PacketBucket(OrigamiConfig.packetIntervalSeconds * 1000, 150);
+    }
+
+    @Override
+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
+        int packets = bucket.incrementPackets(1);
+        if (bucket.getCurrentPacketRate() > OrigamiConfig.maxPacketRate) {
+            connection.disconnect(OrigamiConfig.packetLimiterDisconnectMessage);
+            LOGGER.log(Level.WARN, "Player ({}) was kicked for sending too many packets! {} in the last {} seconds", connection.getPlayer() == null ? "player not initialized" : connection.getPlayer().getName(), packets, bucket.intervalTime / 1000.0);
+            return;
+        }
+        super.channelRead(ctx, msg);
+    }
+}
diff --git a/src/main/java/com/mrivanplays/origami/util/PacketBucket.java b/src/main/java/com/mrivanplays/origami/util/PacketBucket.java
new file mode 100644
index 0000000000000000000000000000000000000000..b99fc66b1c18cbb9538bb5e38b288f9f6ab8a7cf
--- /dev/null
+++ b/src/main/java/com/mrivanplays/origami/util/PacketBucket.java
@@ -0,0 +1,82 @@
+package com.mrivanplays.origami.util;
+
+import java.util.Arrays;
+
+/**
+ * @author Spottedleaf
+ */
+public class PacketBucket {
+
+    private static final double NANOSECONDS_TO_MILLISECONDS = 1.0e-6; // 1e3 / 1e9
+
+    private static final int MILLISECONDS_TO_SECONDS = 1000;
+    public final double intervalTime;
+    public final double intervalResolution;
+    public final int totalBuckets;
+    private final int[] data;
+    private int newestData;
+    private double lastBucketTime;
+    private int sum;
+
+    public PacketBucket(final double intervalTime, final int totalBuckets) {
+        this.intervalTime = intervalTime;
+        this.intervalResolution = intervalTime/(double)totalBuckets;
+        this.totalBuckets = totalBuckets;
+        this.data = new int[totalBuckets];
+    }
+
+    public int incrementPackets(final int packets) {
+        return this.incrementPackets(System.nanoTime(), packets);
+    }
+
+    private int incrementPackets(final long currentTime, final int packets) {
+        final double timeMs = currentTime * NANOSECONDS_TO_MILLISECONDS;
+        double timeDelta = timeMs - this.lastBucketTime;
+
+        if (timeDelta < 0.0) {
+            timeDelta = 0.0;
+        }
+
+        if (timeDelta < this.intervalResolution) {
+            this.data[this.newestData] += packets;
+            return this.sum += packets;
+        }
+
+        final int bucketsToMove = (int)(timeDelta / this.intervalResolution);
+
+        final double nextBucketTime = this.lastBucketTime + bucketsToMove * this.intervalResolution;
+
+        if (bucketsToMove >= this.totalBuckets) {
+            Arrays.fill(this.data, 0);
+
+            this.data[0] = packets;
+            this.sum = packets;
+            this.newestData = 0;
+            this.lastBucketTime = timeMs;
+
+            return packets;
+        }
+
+        for (int i = 1; i < bucketsToMove; ++i) {
+            final int index = (this.newestData + i) % this.totalBuckets;
+            this.sum -= this.data[index];
+            this.data[index] = 0;
+        }
+
+        final int newestDataIndex = (this.newestData + bucketsToMove) % this.totalBuckets;
+        this.sum += packets - this.data[newestDataIndex]; // this.sum += packets; this.sum -= this.data[index]
+        this.data[newestDataIndex] = packets;
+        this.newestData = newestDataIndex;
+        this.lastBucketTime = nextBucketTime;
+
+        return this.sum;
+    }
+
+    public int getTotalPackets() {
+        return this.sum;
+    }
+
+    public double getCurrentPacketRate() {
+        return this.sum / (this.intervalTime / (double)MILLISECONDS_TO_SECONDS);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
index 84b9c31cc1f7303a4ada7ea4c9dfcad9b74aa3ed..c8c86efc46d7a9c9c7e3e7c50435e4db7ded0dd1 100644
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -116,6 +116,7 @@ public class PlayerConnection implements PacketListenerPlayIn {
 
         // CraftBukkit start - add fields and methods
         this.server = minecraftserver.server;
+        networkmanager.channel.pipeline().addBefore("decoder", "limiter", new com.mrivanplays.origami.util.OrigamiPacketLimiter(this)); // Origami
     }
 
     private final org.bukkit.craftbukkit.CraftServer server;

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <ivan@mrivanplays.com>
Date: Fri, 17 Jul 2020 14:01:01 +0300
Subject: [PATCH] Optimize BehaviorController


diff --git a/src/main/java/net/minecraft/server/BehaviorController.java b/src/main/java/net/minecraft/server/BehaviorController.java
index ae2905b403a63396d9cdc61444586ea5548f2974..0cedab10ea7d6564d8f87fa9784bf9aaca8ce7d3 100644
--- a/src/main/java/net/minecraft/server/BehaviorController.java
+++ b/src/main/java/net/minecraft/server/BehaviorController.java
@@ -53,13 +53,14 @@ public class BehaviorController<E extends EntityLiving> {
 
         mutableobject.setValue((new MapCodec<BehaviorController<E>>() {
             public <T> Stream<T> keys(DynamicOps<T> dynamicops) {
-                return collection.stream().flatMap((memorymoduletype) -> {
-                    return SystemUtils.a(memorymoduletype.getSerializer().map((codec) -> {
-                        return IRegistry.MEMORY_MODULE_TYPE.getKey(memorymoduletype);
-                    }));
-                }).map((minecraftkey) -> {
-                    return dynamicops.createString(minecraftkey.toString());
-                });
+                // Origami start
+                // about previous impl: WHY? WHO DID THIS TO YOU?
+                Collection<T> candidates = new java.util.ArrayList<>();
+                for (MemoryModuleType<?> moduleType : collection) {
+                    moduleType.getSerializer().map(c -> IRegistry.MEMORY_MODULE_TYPE.getKey(moduleType)).ifPresent(key -> candidates.add(dynamicops.createString(key.toString())));
+                }
+                return candidates.stream();
+                // Origami end
             }
 
             public <T> DataResult<BehaviorController<E>> decode(DynamicOps<T> dynamicops, MapLike<T> maplike) {
@@ -71,23 +72,17 @@ public class BehaviorController<E extends EntityLiving> {
                         return this.a(memorymoduletype, dynamicops, pair.getSecond());
                     });
 
-                    mutableobject1.setValue(((DataResult) mutableobject1.getValue()).apply2(Builder::add, dataresult1));
+                    mutableobject1.setValue((mutableobject1.getValue()).apply2(Builder::add, dataresult1)); // Origami - decompile fix
                 });
-                DataResult dataresult = (DataResult) mutableobject1.getValue();
-                Logger logger = BehaviorController.LOGGER;
+                DataResult<ImmutableList.Builder<BehaviorController.a<?>>> dataresult = mutableobject1.getValue(); // Origami - decompile fix
 
-                logger.getClass();
-                ImmutableList<BehaviorController.a<?>> immutablelist = (ImmutableList) dataresult.resultOrPartial(logger::error).map(Builder::build).orElseGet(ImmutableList::of);
-                Collection collection2 = collection;
-                Collection collection3 = collection1;
-                MutableObject mutableobject2 = mutableobject;
+                ImmutableList<BehaviorController.a<?>> immutablelist = dataresult.resultOrPartial(BehaviorController.LOGGER::error).map(Builder::build).orElseGet(ImmutableList::of); // Origami - decompile fix
 
-                mutableobject.getClass();
-                return DataResult.success(new BehaviorController<>(collection2, collection3, immutablelist, mutableobject2::getValue));
+                return DataResult.success(new BehaviorController<>(collection, collection1, immutablelist, mutableobject::getValue)); // Origami - decompile fix
             }
 
             private <T, U> DataResult<BehaviorController.a<U>> a(MemoryModuleType<U> memorymoduletype, DynamicOps<T> dynamicops, T t0) {
-                return ((DataResult) memorymoduletype.getSerializer().map(DataResult::success).orElseGet(() -> {
+                return (memorymoduletype.getSerializer().map(DataResult::success).orElseGet(() -> { // Origami - decompile fix
                     return DataResult.error("No codec for memory: " + memorymoduletype);
                 })).flatMap((codec) -> {
                     return codec.parse(dynamicops, t0);
@@ -97,9 +92,9 @@ public class BehaviorController<E extends EntityLiving> {
             }
 
             public <T> RecordBuilder<T> encode(BehaviorController<E> behaviorcontroller, DynamicOps<T> dynamicops, RecordBuilder<T> recordbuilder) {
-                behaviorcontroller.j().forEach((behaviorcontroller_a) -> {
+                for (BehaviorController.a<?> behaviorcontroller_a : behaviorcontroller.memoriesList()) { // Origami
                     behaviorcontroller_a.a(dynamicops, recordbuilder);
-                });
+                } // Origami
                 return recordbuilder;
             }
         }).fieldOf("memories").codec());
@@ -155,9 +150,18 @@ public class BehaviorController<E extends EntityLiving> {
     }
 
     public <T> DataResult<T> a(DynamicOps<T> dynamicops) {
-        return ((Codec) this.b.get()).encodeStart(dynamicops, this);
+        return this.b.get().encodeStart(dynamicops, this); // Origami - decompile fix
     }
 
+    // Origami start
+    private List<BehaviorController.a<?>> memoriesList() {
+        List<BehaviorController.a<?>> ret = new java.util.ArrayList<>();
+        for (Map.Entry<MemoryModuleType<?>, Optional<? extends ExpirableMemory<?>>> entry : memories.entrySet()) {
+            ret.add(BehaviorController.a.b(entry.getKey(), (Optional) entry.getValue()));
+        }
+        return ret;
+    }
+    // Origami end
     private Stream<BehaviorController.a<?>> j() {
         return this.memories.entrySet().stream().map((entry) -> {
             return BehaviorController.a.b((MemoryModuleType) entry.getKey(), (Optional) entry.getValue());
@@ -196,7 +200,7 @@ public class BehaviorController<E extends EntityLiving> {
     }
 
     public <U> Optional<U> getMemory(MemoryModuleType<U> memorymoduletype) {
-        return ((Optional) this.memories.get(memorymoduletype)).map(ExpirableMemory::c);
+        return (Optional<U>) this.memories.get(memorymoduletype).map(ExpirableMemory::c); // Origami - decompile fix
     }
 
     public <U> boolean b(MemoryModuleType<U> memorymoduletype, U u0) {
@@ -206,7 +210,7 @@ public class BehaviorController<E extends EntityLiving> {
     }
 
     public boolean a(MemoryModuleType<?> memorymoduletype, MemoryStatus memorystatus) {
-        Optional<? extends ExpirableMemory<?>> optional = (Optional) this.memories.get(memorymoduletype);
+        Optional<? extends ExpirableMemory<?>> optional = this.memories.get(memorymoduletype); // Origami - decompile fix
 
         return optional == null ? false : memorystatus == MemoryStatus.REGISTERED || memorystatus == MemoryStatus.VALUE_PRESENT && optional.isPresent() || memorystatus == MemoryStatus.VALUE_ABSENT && !optional.isPresent();
     }
@@ -535,7 +539,7 @@ public class BehaviorController<E extends EntityLiving> {
         private final MemoryModuleType<U> a;
         private final Optional<? extends ExpirableMemory<U>> b;
 
-        private static <U> BehaviorController.a<U> b(MemoryModuleType<U> memorymoduletype, Optional<? extends ExpirableMemory<?>> optional) {
+        private static <U> BehaviorController.a<U> b(MemoryModuleType<U> memorymoduletype, Optional<? extends ExpirableMemory<U>> optional) { // Origami - decompile fix
             return new BehaviorController.a<>(memorymoduletype, optional);
         }
 
@@ -570,11 +574,8 @@ public class BehaviorController<E extends EntityLiving> {
         }
 
         public BehaviorController<E> a(Dynamic<?> dynamic) {
-            DataResult dataresult = this.c.parse(dynamic);
-            Logger logger = BehaviorController.LOGGER;
-
-            logger.getClass();
-            return (BehaviorController) dataresult.resultOrPartial(logger::error).orElseGet(() -> {
+            DataResult<BehaviorController<E>> dataresult = this.c.parse(dynamic); // Origami - decompile fix
+            return dataresult.resultOrPartial(BehaviorController.LOGGER::error).orElseGet(() -> { // Origami - decompile fix
                 return new BehaviorController<>(this.a, this.b, ImmutableList.of(), () -> {
                     return this.c;
                 });

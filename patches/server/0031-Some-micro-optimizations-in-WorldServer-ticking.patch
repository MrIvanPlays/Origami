From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <ivan@mrivanplays.com>
Date: Sun, 19 Jul 2020 18:58:04 +0300
Subject: [PATCH] Some micro optimizations in WorldServer ticking


diff --git a/src/main/java/net/minecraft/server/WorldServer.java b/src/main/java/net/minecraft/server/WorldServer.java
index 8776972c5b9bda12f7495e382358c7fed38e5fc6..102c4413a1b14670a2ad188bc6e3099e9fe932a2 100644
--- a/src/main/java/net/minecraft/server/WorldServer.java
+++ b/src/main/java/net/minecraft/server/WorldServer.java
@@ -458,12 +458,17 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.i, this.thunderLevel));
         }
         // */
-        for (int idx = 0; idx < this.players.size(); ++idx) {
-            if (((EntityPlayer) this.players.get(idx)).world == this) {
-                ((EntityPlayer) this.players.get(idx)).tickWeather();
+        // Origami start
+        for (EntityPlayer player : players) {
+            if (player.world == this) {
+                player.tickWeather();
+                player.updateWeather(this.lastRainLevel, this.rainLevel, this.lastThunderLevel, this.thunderLevel);
+                if (flag != this.isRaining()) player.setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
+                // Origami end
             }
         }
 
+        /* // Origami start - moved up
         if (flag != this.isRaining()) {
             // Only send weather packets to those affected
             for (int idx = 0; idx < this.players.size(); ++idx) {
@@ -477,11 +482,16 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                 ((EntityPlayer) this.players.get(idx)).updateWeather(this.lastRainLevel, this.rainLevel, this.lastThunderLevel, this.thunderLevel);
             }
         }
+         */ // Origami end
         // CraftBukkit end
 
+        // Origami start
+        /*
         if (this.everyoneSleeping && this.players.stream().noneMatch((entityplayer) -> {
             return !entityplayer.isSpectator() && !entityplayer.isDeeplySleeping() && !entityplayer.fauxSleeping; // CraftBukkit
         })) {
+         */
+        Runnable runnable = () -> {
             // CraftBukkit start
             long l = this.worldData.getDayTime() + 24000L;
             TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (l - l % 24000L) - this.getDayTime());
@@ -501,7 +511,15 @@ public class WorldServer extends World implements GeneratorAccessSeed {
             if (this.getGameRules().getBoolean(GameRules.DO_WEATHER_CYCLE)) {
                 this.clearWeather();
             }
+        };
+        if (everyoneSleeping) {
+            boolean noneMatch = true;
+            for (EntityPlayer entityplayer : players) {
+                if (entityplayer.isSpectator() && entityplayer.isDeeplySleeping() && entityplayer.fauxSleeping) { noneMatch = false;break; }
+            }
+            if (noneMatch) runnable.run();
         }
+        // Origami end
 
         this.N();
         this.b();
@@ -649,9 +667,9 @@ public class WorldServer extends World implements GeneratorAccessSeed {
     }
 
     private void wakeupPlayers() {
-        (this.players.stream().filter(EntityLiving::isSleeping).collect(Collectors.toList())).forEach((entityplayer) -> { // CraftBukkit - decompile error
+        for (EntityPlayer entityplayer : players) { if (entityplayer.isSleeping()) { // Origami
             entityplayer.wakeup(false, false);
-        });
+        }} // Origami
     }
 
     // Paper start - optimise random block ticking
@@ -1323,8 +1341,9 @@ public class WorldServer extends World implements GeneratorAccessSeed {
         // Spigot start
         if ( entity instanceof EntityHuman )
         {
-            this.getMinecraftServer().worldServer.values().stream().map( WorldServer::getWorldPersistentData ).forEach( (worldData) ->
+            for (WorldServer worldServer : getMinecraftServer().worldServer.values()) // Origami
             {
+                WorldPersistentData worldData = worldServer.getWorldPersistentData(); // Origami
                 for (Object o : worldData.data.values() )
                 {
                     if ( o instanceof WorldMap )
@@ -1341,7 +1360,7 @@ public class WorldServer extends World implements GeneratorAccessSeed {
                         }
                     }
                 }
-            } );
+            } // Origami
         }
         // Spigot end
         // Spigot Start
